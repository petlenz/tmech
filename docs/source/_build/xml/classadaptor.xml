<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classadaptor" kind="class" language="C++" prot="public">
    <compoundname>adaptor</compoundname>
    <basecompoundref refid="classtensor__base" prot="public" virt="non-virtual">tensor_base&lt; adaptor&lt; _T, _Dim, _Rank, _Type &gt; &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename _T</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>_Dim</declname>
        <defname>_Dim</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>_Rank</declname>
        <defname>_Rank</defname>
      </param>
      <param>
        <type>typename _Type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="classadaptor_1ace214bbf7d9a1c087544ffe4684f30cc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr adaptor&lt; _T, _Dim, _Rank, _Type &gt;::adaptor</definition>
        <argsstring>(_T *__data)</argsstring>
        <name>adaptor</name>
        <qualifiedname>adaptor::adaptor</qualifiedname>
        <param>
          <type>_T *</type>
          <declname>__data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="37" column="15" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classadaptor_1aa566e2d7c9464ce9cb97959e9755f14e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr adaptor&lt; _T, _Dim, _Rank, _Type &gt;::adaptor</definition>
        <argsstring>(adaptor const &amp;__data)</argsstring>
        <name>adaptor</name>
        <qualifiedname>adaptor::adaptor</qualifiedname>
        <param>
          <type><ref refid="classadaptor" kindref="compound">adaptor</ref> const &amp;</type>
          <declname>__data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="39" column="15" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" bodystart="34" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data</header>
      <memberdef kind="function" id="classadaptor_1a47ece35bba9e02488ecc0eeb48799ef5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Indices</declname>
            <defname>Indices</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto adaptor&lt; _T, _Dim, _Rank, _Type &gt;::operator()</definition>
        <argsstring>(Indices ...indices) const</argsstring>
        <name>operator()</name>
        <qualifiedname>adaptor::operator()</qualifiedname>
        <param>
          <type>Indices ...</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Returns the element at the specified position in the expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indicies</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices specifying the position in the tensor expression. Indices must be unsigned integers, the number of indices must be equal to the rank of the expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="45" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" bodystart="70" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Extended copy semantic</header>
      <memberdef kind="function" id="classadaptor_1a462639568260b4830578f966f486f69d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Derived</type>
          </param>
        </templateparamlist>
        <type>constexpr auto const &amp;</type>
        <definition>constexpr auto const  &amp; adaptor&lt; _T, _Dim, _Rank, _Type &gt;::operator=</definition>
        <argsstring>(tensor_base&lt; _Derived &gt; const &amp;tensor_base)</argsstring>
        <name>operator=</name>
        <qualifiedname>adaptor::operator=</qualifiedname>
        <param>
          <type><ref refid="classtensor__base" kindref="compound">tensor_base</ref>&lt; _Derived &gt; const &amp;</type>
          <declname>tensor_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The extended assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" line="48" column="37" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" bodystart="48" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dimension and rank</header>
      <memberdef kind="function" id="classadaptor_1a590576dcf820bd1a03e9c166e78edaa8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto adaptor&lt; _T, _Dim, _Rank, _Type &gt;::rank</definition>
        <argsstring>()</argsstring>
        <name>rank</name>
        <qualifiedname>adaptor::rank</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rank of the expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="47" column="34" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classadaptor_1a3ae8315ba2cfb0fe2d10b9408bc13342" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto adaptor&lt; _T, _Dim, _Rank, _Type &gt;::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <qualifiedname>adaptor::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dimension of the expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="49" column="34" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_meat.h" bodystart="83" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classadaptor_1a4fd3195f02547dd12d52a3ea380c4dca" prot="public" static="no">
        <type>typename std::remove_const&lt; _T &gt;::type</type>
        <definition>using adaptor&lt; _T, _Dim, _Rank, _Type &gt;::value_type =  typename std::remove_const&lt;_T&gt;::type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>adaptor::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="34" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classadaptor_1a85d432485d22e0e0ea6142cd75e686e8" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using adaptor&lt; _T, _Dim, _Rank, _Type &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>adaptor::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="35" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classadaptor_1a6542ae0a2031de41b6ccd376764b40df" prot="private" static="no" mutable="no">
        <type>_T *</type>
        <definition>_T* adaptor&lt; _T, _Dim, _Rank, _Type &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <qualifiedname>adaptor::_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="52" column="9" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classadaptor_1a462639568260b4830578f966f486f69d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Derived</type>
          </param>
        </templateparamlist>
        <type>constexpr auto const &amp;</type>
        <definition>constexpr auto const  &amp; adaptor&lt; _T, _Dim, _Rank, _Type &gt;::operator=</definition>
        <argsstring>(tensor_base&lt; _Derived &gt; const &amp;tensor_base)</argsstring>
        <name>operator=</name>
        <qualifiedname>adaptor::operator=</qualifiedname>
        <param>
          <type><ref refid="classtensor__base" kindref="compound">tensor_base</ref>&lt; _Derived &gt; const &amp;</type>
          <declname>tensor_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="42" column="33"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>adaptor&lt; _T, _Dim, _Rank, _Type &gt;</label>
        <link refid="classadaptor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tensor_base&lt; adaptor&lt; _T, _Dim, _Rank, _Type &gt; &gt;</label>
        <link refid="classtensor__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>adaptor&lt; _T, _Dim, _Rank, _Type &gt;</label>
        <link refid="classadaptor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tensor_base&lt; adaptor&lt; _T, _Dim, _Rank, _Type &gt; &gt;</label>
        <link refid="classtensor__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" line="31" column="1" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/adaptor_wrapper_bones.h" bodystart="32" bodyend="53"/>
    <listofallmembers>
      <member refid="classadaptor_1a6542ae0a2031de41b6ccd376764b40df" prot="private" virt="non-virtual"><scope>adaptor</scope><name>_data</name></member>
      <member refid="classtensor__base_1ac10026fb2040db2caab8e6108cfdb95e" prot="protected" virt="non-virtual"><scope>adaptor</scope><name>_is_init</name></member>
      <member refid="classadaptor_1ace214bbf7d9a1c087544ffe4684f30cc" prot="public" virt="non-virtual"><scope>adaptor</scope><name>adaptor</name></member>
      <member refid="classadaptor_1aa566e2d7c9464ce9cb97959e9755f14e" prot="public" virt="non-virtual"><scope>adaptor</scope><name>adaptor</name></member>
      <member refid="classtensor__base_1a9217342c966e050b1d2ae5431ff6d355" prot="public" virt="non-virtual"><scope>adaptor</scope><name>convert</name></member>
      <member refid="classtensor__base_1a1f79397b5e5da7ba5b430dad6e2e6f7b" prot="public" virt="non-virtual"><scope>adaptor</scope><name>convert</name></member>
      <member refid="classtensor__base_1a9217342c966e050b1d2ae5431ff6d355" prot="public" virt="non-virtual"><scope>adaptor</scope><name>convert</name></member>
      <member refid="classtensor__base_1a1f79397b5e5da7ba5b430dad6e2e6f7b" prot="public" virt="non-virtual"><scope>adaptor</scope><name>convert</name></member>
      <member refid="classadaptor_1a3ae8315ba2cfb0fe2d10b9408bc13342" prot="public" virt="non-virtual"><scope>adaptor</scope><name>dimension</name></member>
      <member refid="classadaptor_1a47ece35bba9e02488ecc0eeb48799ef5" prot="public" virt="non-virtual"><scope>adaptor</scope><name>operator()</name></member>
      <member refid="classtensor__base_1a4b12b9e1b4e6065b63ef84905f54272e" prot="public" virt="non-virtual"><scope>adaptor</scope><name>operator-</name></member>
      <member refid="classtensor__base_1a4b12b9e1b4e6065b63ef84905f54272e" prot="public" virt="non-virtual"><scope>adaptor</scope><name>operator-</name></member>
      <member refid="classadaptor_1a462639568260b4830578f966f486f69d" prot="public" virt="non-virtual"><scope>adaptor</scope><name>operator=</name></member>
      <member refid="classadaptor_1a462639568260b4830578f966f486f69d" prot="public" virt="non-virtual"><scope>adaptor</scope><name>operator=</name></member>
      <member refid="classadaptor_1a590576dcf820bd1a03e9c166e78edaa8" prot="public" virt="non-virtual"><scope>adaptor</scope><name>rank</name></member>
      <member refid="classtensor__base_1a193f15accda2947f7ac1d71e46b05588" prot="public" virt="non-virtual"><scope>adaptor</scope><name>size</name></member>
      <member refid="classtensor__base_1a193f15accda2947f7ac1d71e46b05588" prot="public" virt="non-virtual"><scope>adaptor</scope><name>size</name></member>
      <member refid="classadaptor_1a85d432485d22e0e0ea6142cd75e686e8" prot="public" virt="non-virtual"><scope>adaptor</scope><name>size_type</name></member>
      <member refid="classtensor__base_1a4f1b23287884e2560bd9a684fc8b4e67" prot="public" virt="non-virtual"><scope>adaptor</scope><name>tensor_base</name></member>
      <member refid="classtensor__base_1afdecc080c560462657208e6e75ab4b98" prot="public" virt="non-virtual"><scope>adaptor</scope><name>tensor_base</name></member>
      <member refid="classtensor__base_1a4f1b23287884e2560bd9a684fc8b4e67" prot="public" virt="non-virtual"><scope>adaptor</scope><name>tensor_base</name></member>
      <member refid="classtensor__base_1afdecc080c560462657208e6e75ab4b98" prot="public" virt="non-virtual"><scope>adaptor</scope><name>tensor_base</name></member>
      <member refid="classadaptor_1a4fd3195f02547dd12d52a3ea380c4dca" prot="public" virt="non-virtual"><scope>adaptor</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
