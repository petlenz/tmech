<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classdetail_1_1volumetric__wrapper" kind="class" language="C++" prot="public">
    <compoundname>detail::volumetric_wrapper</compoundname>
    <basecompoundref refid="classtensor__base" prot="public" virt="non-virtual">tensor_base&lt; volumetric_wrapper&lt; Tensor &gt; &gt;</basecompoundref>
    <includes local="no">volumetric_wrapper_bones.h</includes>
    <templateparamlist>
      <param>
        <type>typename Tensor</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="classdetail_1_1volumetric__wrapper_1a1cbc906aa74dd14b1bb7c9acfc9663f3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr detail::volumetric_wrapper&lt; Tensor &gt;::volumetric_wrapper</definition>
        <argsstring>(data_type_tensor const &amp;data)</argsstring>
        <name>volumetric_wrapper</name>
        <qualifiedname>detail::volumetric_wrapper::volumetric_wrapper</qualifiedname>
        <param>
          <type>data_type_tensor const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="35" column="15" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_meat.h" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1volumetric__wrapper_1a648585a7db37f08ad5261f829c530bbd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr detail::volumetric_wrapper&lt; Tensor &gt;::volumetric_wrapper</definition>
        <argsstring>(volumetric_wrapper const &amp;data)</argsstring>
        <name>volumetric_wrapper</name>
        <qualifiedname>detail::volumetric_wrapper::volumetric_wrapper</qualifiedname>
        <param>
          <type><ref refid="classdetail_1_1volumetric__wrapper" kindref="compound">volumetric_wrapper</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="37" column="15" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_meat.h" bodystart="37" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data</header>
      <memberdef kind="function" id="classdetail_1_1volumetric__wrapper_1a3c59e036e13c758e5ad27eaf59fc01c4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::volumetric_wrapper&lt; Tensor &gt;::operator()</definition>
        <argsstring>(size_type const i, size_type const j) const</argsstring>
        <name>operator()</name>
        <qualifiedname>detail::volumetric_wrapper::operator()</qualifiedname>
        <param>
          <type>size_type const</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_type const</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns the element at the specified position of the wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index specifying the row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index specifying the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="39" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_meat.h" bodystart="53" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Evaluation of tensor expression</header>
      <memberdef kind="function" id="classdetail_1_1volumetric__wrapper_1a79de31923be82bbb1fc5b33bd7ebe582" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::volumetric_wrapper&lt; Tensor &gt;::evaluate</definition>
        <argsstring>()</argsstring>
        <name>evaluate</name>
        <qualifiedname>detail::volumetric_wrapper::evaluate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluates the underlying tensor expression and computes the trace. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="45" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_meat.h" bodystart="87" bodyend="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dimension and rank</header>
      <memberdef kind="function" id="classdetail_1_1volumetric__wrapper_1a139a1cd127ee495b7664d3c582f3ce41" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::volumetric_wrapper&lt; Tensor &gt;::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <qualifiedname>detail::volumetric_wrapper::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dimension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="41" column="34" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_meat.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1volumetric__wrapper_1a7580b073d73a7a927ce3b729f5e21e36" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::volumetric_wrapper&lt; Tensor &gt;::rank</definition>
        <argsstring>()</argsstring>
        <name>rank</name>
        <qualifiedname>detail::volumetric_wrapper::rank</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rank of the expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="43" column="34" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_meat.h" bodystart="74" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classdetail_1_1volumetric__wrapper_1af23c8ff190f7dea49c4a0dc944aad63a" prot="private" static="no">
        <type>typename std::remove_const&lt; typename std::remove_reference&lt; Tensor &gt;::type &gt;::type</type>
        <definition>using detail::volumetric_wrapper&lt; Tensor &gt;::data_type_tensor =  typename std::remove_const&lt;typename std::remove_reference&lt;Tensor&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>data_type_tensor</name>
        <qualifiedname>detail::volumetric_wrapper::data_type_tensor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="30" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdetail_1_1volumetric__wrapper_1a83b51697234fa13d77209a4889b6d1e0" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using detail::volumetric_wrapper&lt; Tensor &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>detail::volumetric_wrapper::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="32" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1volumetric__wrapper_1a9a7d4d452c5ea82e6768df80361dc119" prot="public" static="no">
        <type>typename data_type_tensor::value_type</type>
        <definition>using detail::volumetric_wrapper&lt; Tensor &gt;::value_type =  typename data_type_tensor::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>detail::volumetric_wrapper::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="33" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdetail_1_1volumetric__wrapper_1ade9e87654f09b63e231c49daadf5a83b" prot="private" static="no" mutable="no">
        <type>value_type</type>
        <definition>value_type detail::volumetric_wrapper&lt; Tensor &gt;::_trace</definition>
        <argsstring></argsstring>
        <name>_trace</name>
        <qualifiedname>detail::volumetric_wrapper::_trace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="48" column="16" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1volumetric__wrapper_1a2f57d2b33688bde75795b576b2a26da1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool detail::volumetric_wrapper&lt; Tensor &gt;::is_init</definition>
        <argsstring></argsstring>
        <name>is_init</name>
        <qualifiedname>detail::volumetric_wrapper::is_init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="49" column="10" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1volumetric__wrapper_1afe72bddbf390bc3e5991d2c0d0b86483" prot="private" static="no" mutable="no">
        <type>Tensor</type>
        <definition>Tensor detail::volumetric_wrapper&lt; Tensor &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <qualifiedname>detail::volumetric_wrapper::_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="50" column="12" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for the determination of the volumetric part of a tensor expression. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor expression from which the volumetric part should be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>detail::volumetric_wrapper&lt; Tensor &gt;</label>
        <link refid="classdetail_1_1volumetric__wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tensor_base&lt; volumetric_wrapper&lt; Tensor &gt; &gt;</label>
        <link refid="classtensor__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>detail::volumetric_wrapper&lt; Tensor &gt;</label>
        <link refid="classdetail_1_1volumetric__wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tensor_base&lt; volumetric_wrapper&lt; Tensor &gt; &gt;</label>
        <link refid="classtensor__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" line="28" column="1" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/tensor/volumetric_wrapper_bones.h" bodystart="29" bodyend="51"/>
    <listofallmembers>
      <member refid="classdetail_1_1volumetric__wrapper_1afe72bddbf390bc3e5991d2c0d0b86483" prot="private" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>_data</name></member>
      <member refid="classtensor__base_1ac10026fb2040db2caab8e6108cfdb95e" prot="protected" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>_is_init</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1ade9e87654f09b63e231c49daadf5a83b" prot="private" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>_trace</name></member>
      <member refid="classtensor__base_1a9217342c966e050b1d2ae5431ff6d355" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>convert</name></member>
      <member refid="classtensor__base_1a1f79397b5e5da7ba5b430dad6e2e6f7b" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>convert</name></member>
      <member refid="classtensor__base_1a9217342c966e050b1d2ae5431ff6d355" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>convert</name></member>
      <member refid="classtensor__base_1a1f79397b5e5da7ba5b430dad6e2e6f7b" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>convert</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1af23c8ff190f7dea49c4a0dc944aad63a" prot="private" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>data_type_tensor</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a139a1cd127ee495b7664d3c582f3ce41" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>dimension</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a79de31923be82bbb1fc5b33bd7ebe582" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>evaluate</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a2f57d2b33688bde75795b576b2a26da1" prot="private" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>is_init</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a3c59e036e13c758e5ad27eaf59fc01c4" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>operator()</name></member>
      <member refid="classtensor__base_1a4b12b9e1b4e6065b63ef84905f54272e" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>operator-</name></member>
      <member refid="classtensor__base_1a4b12b9e1b4e6065b63ef84905f54272e" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>operator-</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a7580b073d73a7a927ce3b729f5e21e36" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>rank</name></member>
      <member refid="classtensor__base_1a193f15accda2947f7ac1d71e46b05588" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>size</name></member>
      <member refid="classtensor__base_1a193f15accda2947f7ac1d71e46b05588" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>size</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a83b51697234fa13d77209a4889b6d1e0" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>size_type</name></member>
      <member refid="classtensor__base_1a4f1b23287884e2560bd9a684fc8b4e67" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>tensor_base</name></member>
      <member refid="classtensor__base_1afdecc080c560462657208e6e75ab4b98" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>tensor_base</name></member>
      <member refid="classtensor__base_1a4f1b23287884e2560bd9a684fc8b4e67" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>tensor_base</name></member>
      <member refid="classtensor__base_1afdecc080c560462657208e6e75ab4b98" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>tensor_base</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a9a7d4d452c5ea82e6768df80361dc119" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>value_type</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a1cbc906aa74dd14b1bb7c9acfc9663f3" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>volumetric_wrapper</name></member>
      <member refid="classdetail_1_1volumetric__wrapper_1a648585a7db37f08ad5261f829c530bbd" prot="public" virt="non-virtual"><scope>detail::volumetric_wrapper</scope><name>volumetric_wrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
