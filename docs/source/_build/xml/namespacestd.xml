<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespacestd" kind="namespace" language="C++">
    <compoundname>std</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="std__functions__implementation_8h_1ad6a0f5168c8f27e0be567e0fe8a5569a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::exp</definition>
        <argsstring>(_Variable)</argsstring>
        <name>exp</name>
        <qualifiedname>std::exp</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="9" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ad2c4e4da9d264145390ffe4904e4ef3c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::log</definition>
        <argsstring>(_Variable)</argsstring>
        <name>log</name>
        <qualifiedname>std::log</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="16" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1aca968d3dacb18f12a4feea80093b00fd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::log2</definition>
        <argsstring>(_Variable)</argsstring>
        <name>log2</name>
        <qualifiedname>std::log2</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="23" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1a2045af4796db28a5a7b3c9a5b003d6b6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::log10</definition>
        <argsstring>(_Variable)</argsstring>
        <name>log10</name>
        <qualifiedname>std::log10</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="30" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ad3c8713bf611bcc81a5ddcfc8153269d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::sqrt</definition>
        <argsstring>(_Variable)</argsstring>
        <name>sqrt</name>
        <qualifiedname>std::sqrt</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="37" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1a62cc20c2f44ec257702d6fb3ef8b3b5c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::abs</definition>
        <argsstring>(_Variable)</argsstring>
        <name>abs</name>
        <qualifiedname>std::abs</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="44" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ae6a5ce38fa117f6cb1693eb084a3854f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::cos</definition>
        <argsstring>(_Variable)</argsstring>
        <name>cos</name>
        <qualifiedname>std::cos</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="51" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1a7332b50b8f40270d403a3737c591fa07" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::sin</definition>
        <argsstring>(_Variable)</argsstring>
        <name>sin</name>
        <qualifiedname>std::sin</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="58" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1aec8c88ff88a3d17c3f320b41a3ff2818" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::acos</definition>
        <argsstring>(_Variable)</argsstring>
        <name>acos</name>
        <qualifiedname>std::acos</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="65" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ae417b0ba1851d46071d9ffade6ec18cc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::asin</definition>
        <argsstring>(_Variable)</argsstring>
        <name>asin</name>
        <qualifiedname>std::asin</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="72" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1a1d0fbb662b1c63c2ca59f40b7325f6a4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::tan</definition>
        <argsstring>(_Variable)</argsstring>
        <name>tan</name>
        <qualifiedname>std::tan</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="79" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ad72b11f0544af253517e8572e1a39d87" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::sign</definition>
        <argsstring>(_Variable)</argsstring>
        <name>sign</name>
        <qualifiedname>std::sign</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="86" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1a97b5fe11c8a65acb3a54807742ea2593" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>long long int</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>long long int</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>long long int</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::pow</definition>
        <argsstring>(_Variable, symdiff::real&lt; T, L, R, E &gt;)</argsstring>
        <name>pow</name>
        <qualifiedname>std::pow</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <param>
          <type>symdiff::real&lt; T, L, R, E &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="94" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ae606ed362cfbeaab28e24f19ac7cd05b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>ID</declname>
            <defname>ID</defname>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::pow</definition>
        <argsstring>(_Variable, symdiff::constant&lt; T, ID &gt;)</argsstring>
        <name>pow</name>
        <qualifiedname>std::pow</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <param>
          <type>symdiff::constant&lt; T, ID &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="103" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="std__functions__implementation_8h_1ac16c849b9f40028322bba4d13ec9734f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Variable</type>
          </param>
          <param>
            <type>typename _VariableExp</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Variable &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableExp &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _Variable::data_type &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_fundamental&lt; typename _VariableExp::data_type &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto std::pow</definition>
        <argsstring>(_Variable, _VariableExp)</argsstring>
        <name>pow</name>
        <qualifiedname>std::pow</qualifiedname>
        <param>
          <type>_Variable</type>
        </param>
        <param>
          <type>_VariableExp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="113" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" bodystart="113" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/std_functions_implementation.h" line="4" column="1"/>
  </compounddef>
</doxygen>
