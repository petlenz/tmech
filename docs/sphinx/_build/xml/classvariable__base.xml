<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classvariable__base" kind="class" language="C++" prot="public">
    <compoundname>variable_base</compoundname>
    <templateparamlist>
      <param>
        <type>typename _Derived</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classvariable__base_1ab3f7ab6e071ad5483c54e5938d067492" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename _Type</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>_Arguments</declname>
            <defname>_Arguments</defname>
          </param>
        </templateparamlist>
        <type>decltype(_Type().update_imp(std::declval&lt; _Arguments &gt;()...))</type>
        <definition>using variable_base&lt; _Derived &gt;::has_update_imp =  decltype(_Type().update_imp(std::declval&lt;_Arguments&gt;()...))</definition>
        <argsstring></argsstring>
        <name>has_update_imp</name>
        <qualifiedname>variable_base::has_update_imp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="24" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvariable__base_1ab97cf80edae47d339094067a5485f8d6" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename _Type</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>_Arguments</declname>
            <defname>_Arguments</defname>
          </param>
        </templateparamlist>
        <type>decltype(_Type().reset_imp(std::declval&lt; _Arguments &gt;()...))</type>
        <definition>using variable_base&lt; _Derived &gt;::has_reset_imp =  decltype(_Type().reset_imp(std::declval&lt;_Arguments&gt;()...))</definition>
        <argsstring></argsstring>
        <name>has_reset_imp</name>
        <qualifiedname>variable_base::has_reset_imp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="27" column="5" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvariable__base_1a2e6b125a913a74412910a6c078ebd3f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedT</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class variable_base</definition>
        <argsstring></argsstring>
        <name>variable_base</name>
        <qualifiedname>variable_base::variable_base</qualifiedname>
        <param>
          <type><ref refid="classvariable__base" kindref="compound">variable_base</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="21" column="18" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classvariable__base_1a6389ce56d344ad1c9e24940437ef9fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _DerivedT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream const &amp;stream, variable_base&lt; _DerivedT &gt; const &amp;var_base)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>variable_base::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream const &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="classvariable__base" kindref="compound">variable_base</ref>&lt; _DerivedT &gt; const &amp;</type>
          <declname>var_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="47" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classvariable__base_1a30d0635dfb734e22c329677f7beb9d4f" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool variable_base&lt; _Derived &gt;::_update</definition>
        <argsstring></argsstring>
        <name>_update</name>
        <qualifiedname>variable_base::_update</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="73" column="17" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvariable__base_1a00c523e7c5d602121591ca8dc8d0accd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr variable_base&lt; _Derived &gt;::variable_base</definition>
        <argsstring>()</argsstring>
        <name>variable_base</name>
        <qualifiedname>variable_base::variable_base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="37" column="15" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_meat.h" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1a08062ec90dcff407477c4281a2949c06" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto variable_base&lt; _Derived &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <qualifiedname>variable_base::convert</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="39" column="20" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_meat.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1af7bb3cfe845189131467ba47a6ff9896" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Data</type>
          </param>
        </templateparamlist>
        <type>constexpr auto &amp;&amp;</type>
        <definition>constexpr auto &amp;&amp; variable_base&lt; _Derived &gt;::operator()</definition>
        <argsstring>(_Data const &amp;x)</argsstring>
        <name>operator()</name>
        <qualifiedname>variable_base::operator()</qualifiedname>
        <param>
          <type>_Data const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="42" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_meat.h" bodystart="26" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1a1bce76f282394521dece5e217c3acbea" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto variable_base&lt; _Derived &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>variable_base::operator-</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="44" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_meat.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1a03e782ff9786edabe13abfc2adef95e5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Data</type>
          </param>
          <param>
            <type>typename __Derived</type>
            <defval>_Derived</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; std::is_lvalue_reference_v&lt; decltype(__Derived().get_value(_Data()))&gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto const &amp;</type>
        <definition>constexpr auto const  &amp; variable_base&lt; _Derived &gt;::value</definition>
        <argsstring>(_Data const &amp;__data) const</argsstring>
        <name>value</name>
        <qualifiedname>variable_base::value</qualifiedname>
        <param>
          <type>_Data const &amp;</type>
          <declname>__data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="50" column="33" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1a734a2b3d2704562addc82b7a00c0cf72" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Data</type>
          </param>
          <param>
            <type>typename __Derived</type>
            <defval>_Derived</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt;!std::is_lvalue_reference_v&lt; decltype(__Derived().get_value(_Data()))&gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto variable_base&lt; _Derived &gt;::value</definition>
        <argsstring>(_Data const &amp;__data) const</argsstring>
        <name>value</name>
        <qualifiedname>variable_base::value</qualifiedname>
        <param>
          <type>_Data const &amp;</type>
          <declname>__data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="55" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1a76d5b56fe2476b728e4b6d873d4cd801" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Data</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto variable_base&lt; _Derived &gt;::update</definition>
        <argsstring>(_Data const &amp;__data)</argsstring>
        <name>update</name>
        <qualifiedname>variable_base::update</qualifiedname>
        <param>
          <type>_Data const &amp;</type>
          <declname>__data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="60" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classvariable__base_1a088c22cdb5a695876bc706c63d8c9dc2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto variable_base&lt; _Derived &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>variable_base::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="66" column="27" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="66" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" line="18" column="1" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/variable_base_bones.h" bodystart="19" bodyend="74"/>
    <listofallmembers>
      <member refid="classvariable__base_1a30d0635dfb734e22c329677f7beb9d4f" prot="protected" virt="non-virtual"><scope>variable_base</scope><name>_update</name></member>
      <member refid="classvariable__base_1a08062ec90dcff407477c4281a2949c06" prot="public" virt="non-virtual"><scope>variable_base</scope><name>convert</name></member>
      <member refid="classvariable__base_1ab97cf80edae47d339094067a5485f8d6" prot="private" virt="non-virtual"><scope>variable_base</scope><name>has_reset_imp</name></member>
      <member refid="classvariable__base_1ab3f7ab6e071ad5483c54e5938d067492" prot="private" virt="non-virtual"><scope>variable_base</scope><name>has_update_imp</name></member>
      <member refid="classvariable__base_1af7bb3cfe845189131467ba47a6ff9896" prot="public" virt="non-virtual"><scope>variable_base</scope><name>operator()</name></member>
      <member refid="classvariable__base_1a1bce76f282394521dece5e217c3acbea" prot="public" virt="non-virtual"><scope>variable_base</scope><name>operator-</name></member>
      <member refid="classvariable__base_1a6389ce56d344ad1c9e24940437ef9fec" prot="public" virt="non-virtual"><scope>variable_base</scope><name>operator&lt;&lt;</name></member>
      <member refid="classvariable__base_1a088c22cdb5a695876bc706c63d8c9dc2" prot="public" virt="non-virtual"><scope>variable_base</scope><name>reset</name></member>
      <member refid="classvariable__base_1a76d5b56fe2476b728e4b6d873d4cd801" prot="public" virt="non-virtual"><scope>variable_base</scope><name>update</name></member>
      <member refid="classvariable__base_1a03e782ff9786edabe13abfc2adef95e5" prot="public" virt="non-virtual"><scope>variable_base</scope><name>value</name></member>
      <member refid="classvariable__base_1a734a2b3d2704562addc82b7a00c0cf72" prot="public" virt="non-virtual"><scope>variable_base</scope><name>value</name></member>
      <member refid="classvariable__base_1a2e6b125a913a74412910a6c078ebd3f3" prot="private" virt="non-virtual"><scope>variable_base</scope><name>variable_base</name></member>
      <member refid="classvariable__base_1a00c523e7c5d602121591ca8dc8d0accd" prot="public" virt="non-virtual"><scope>variable_base</scope><name>variable_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
