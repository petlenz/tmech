<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="tmech__functions__implementation_8h" kind="file" language="C++">
    <compoundname>tmech_functions_implementation.h</compoundname>
    <includedby refid="tmech_8h" local="yes">/home/peter/SynologyDrive/Drive/tmech/include/tmech/tmech.h</includedby>
      <sectiondef kind="func">
      <memberdef kind="function" id="tmech__functions__implementation_8h_1ab4bf99817f1ddc9096b9541284819a9e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _VariableLHS</type>
          </param>
          <param>
            <type>typename _VariableRHS</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableLHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableRHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto otimes</definition>
        <argsstring>(_VariableLHS, _VariableRHS)</argsstring>
        <name>otimes</name>
        <param>
          <type>_VariableLHS</type>
        </param>
        <param>
          <type>_VariableRHS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="7" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="7" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1ab852b9f3caff1ac5b8c446cd653835dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _VariableLHS</type>
          </param>
          <param>
            <type>typename _VariableRHS</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableLHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableRHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto otimesl</definition>
        <argsstring>(_VariableLHS, _VariableRHS)</argsstring>
        <name>otimesl</name>
        <param>
          <type>_VariableLHS</type>
        </param>
        <param>
          <type>_VariableRHS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="24" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="24" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a96ca103d0bc9dc9c35a2843b5b0847a1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _VariableLHS</type>
          </param>
          <param>
            <type>typename _VariableRHS</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableLHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableRHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto otimesu</definition>
        <argsstring>(_VariableLHS, _VariableRHS)</argsstring>
        <name>otimesu</name>
        <param>
          <type>_VariableLHS</type>
        </param>
        <param>
          <type>_VariableRHS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="41" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="41" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1aafe2036104e4628d81a32d5cbb3b1d19" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _SequenceLHS</type>
          </param>
          <param>
            <type>typename _SequenceRHS</type>
          </param>
          <param>
            <type>typename _VariableLHS</type>
          </param>
          <param>
            <type>typename _VariableRHS</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableLHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableRHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto outer_product</definition>
        <argsstring>(_VariableLHS, _VariableRHS)</argsstring>
        <name>outer_product</name>
        <param>
          <type>_VariableLHS</type>
        </param>
        <param>
          <type>_VariableRHS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="58" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a9185290f5a5291db330153419b261ed5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _VariableLHS</type>
          </param>
          <param>
            <type>typename _VariableRHS</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableLHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableRHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto dcontract</definition>
        <argsstring>(_VariableLHS, _VariableRHS)</argsstring>
        <name>dcontract</name>
        <param>
          <type>_VariableLHS</type>
        </param>
        <param>
          <type>_VariableRHS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="65" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="65" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a3bd9565a89d123d76aa6990d68e58bf2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _SequenceLHS</type>
          </param>
          <param>
            <type>typename _SequenceRHS</type>
          </param>
          <param>
            <type>typename _VariableLHS</type>
          </param>
          <param>
            <type>typename _VariableRHS</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableLHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _VariableRHS &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto inner_product</definition>
        <argsstring>(_VariableLHS, _VariableRHS)</argsstring>
        <name>inner_product</name>
        <param>
          <type>_VariableLHS</type>
        </param>
        <param>
          <type>_VariableRHS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="88" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a9ba4fa7ad16baf839968e94507aca730" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Sequence</type>
          </param>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto basis_change</definition>
        <argsstring>(_Expression)</argsstring>
        <name>basis_change</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="94" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a0cf6c2025aed5471ce7fb131396c4bc3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto trans</definition>
        <argsstring>(_Expression)</argsstring>
        <name>trans</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="100" column="16" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="100" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a74bc00e43a53cc35e48593fb5eb28c32" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto trace</definition>
        <argsstring>(_Expression)</argsstring>
        <name>trace</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="114" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="114" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1ade9770bde66377aebe1a0daa4bd6e249" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto det</definition>
        <argsstring>(_Expression)</argsstring>
        <name>det</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="124" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a21465fd8e21eb91c0885332664628052" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto dev</definition>
        <argsstring>(_Expression)</argsstring>
        <name>dev</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="134" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a96209b500676580354872c5eb33794fe" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto sym</definition>
        <argsstring>(_Expression)</argsstring>
        <name>sym</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="147" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a429413a3479a997db6626be3d967ac66" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto skew</definition>
        <argsstring>(_Expression)</argsstring>
        <name>skew</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="157" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="157" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a241b7a60e488cd795315b18cdc64378f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto vol</definition>
        <argsstring>(_Expression)</argsstring>
        <name>vol</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="167" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="167" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a697e4bed1c6c52fb8cf6fed7489b4c59" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto adj</definition>
        <argsstring>(_Expression)</argsstring>
        <name>adj</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="180" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="180" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a620655894906a29a08be617cfeefe822" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto cof</definition>
        <argsstring>(_Expression)</argsstring>
        <name>cof</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="190" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="tmech__functions__implementation_8h_1a41fcfeda6be1b3968065898638878d5d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Expression</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; symdiff::is_symdiff_type&lt; _Expression &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto inv</definition>
        <argsstring>(_Expression)</argsstring>
        <name>inv</name>
        <param>
          <type>_Expression</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" line="200" column="23" bodyfile="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h" bodystart="200" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TMECH_FUNCTIONS_IMPLEMENTATION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TMECH_FUNCTIONS_IMPLEMENTATION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS,</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableLHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableRHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otimes(_VariableLHS,<sp/>_VariableRHS){</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS::data_type;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS::data_type;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_lhs_data_type&gt;;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_rhs_data_type&gt;;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_lhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimes():<sp/>left<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_rhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimes():<sp/>right<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_lhs_info::dimension()<sp/>==<sp/>_rhs_info::dimension(),<sp/></highlight><highlight class="stringliteral">&quot;otimes():<sp/>no<sp/>matching<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LHS_Seq<sp/>=<sp/>tmech::detail::add_value_sequence_t&lt;tmech::detail::sequence_t&lt;_lhs_info::rank()-1&gt;,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>RHS_Seq<sp/>=<sp/>tmech::detail::add_value_sequence_t&lt;tmech::detail::sequence_t&lt;_rhs_info::rank()-1&gt;,<sp/>_lhs_info::rank()+1&gt;;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_outer_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>LHS_Seq,<sp/>RHS_Seq&gt;();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableLHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableRHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otimesl(_VariableLHS,<sp/>_VariableRHS){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS::data_type;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS::data_type;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_lhs_data_type&gt;;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_rhs_data_type&gt;;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_lhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimesl():<sp/>left<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_rhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimesl():<sp/>right<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_lhs_info::dimension()<sp/>==<sp/>_rhs_info::dimension(),<sp/></highlight><highlight class="stringliteral">&quot;otimesl():<sp/>no<sp/>matching<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LHS_Seq<sp/>=<sp/>tmech::sequence&lt;1,4&gt;;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>RHS_Seq<sp/>=<sp/>tmech::sequence&lt;2,3&gt;;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_outer_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>LHS_Seq,<sp/>RHS_Seq&gt;();</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableLHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableRHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otimesu(_VariableLHS,<sp/>_VariableRHS){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS::data_type;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS::data_type;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_lhs_data_type&gt;;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_rhs_data_type&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_lhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimesu():<sp/>left<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_rhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimesu():<sp/>right<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_lhs_info::dimension()<sp/>==<sp/>_rhs_info::dimension(),<sp/></highlight><highlight class="stringliteral">&quot;otimesu():<sp/>no<sp/>matching<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LHS_Seq<sp/>=<sp/>tmech::sequence&lt;1,3&gt;;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>RHS_Seq<sp/>=<sp/>tmech::sequence&lt;2,4&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_outer_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>LHS_Seq,<sp/>RHS_Seq&gt;();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_SequenceLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_SequenceRHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableLHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableRHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outer_product(_VariableLHS,<sp/>_VariableRHS){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_outer_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>_SequenceLHS,<sp/>_SequenceRHS&gt;();</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableLHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableRHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dcontract(_VariableLHS,<sp/>_VariableRHS){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS::data_type;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS::data_type;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_lhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_lhs_data_type&gt;;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_rhs_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_rhs_data_type&gt;;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_lhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimesu():<sp/>left<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_rhs_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;otimesu():<sp/>right<sp/>hand<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_lhs_info::dimension()<sp/>==<sp/>_rhs_info::dimension(),<sp/></highlight><highlight class="stringliteral">&quot;otimesu():<sp/>no<sp/>matching<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(_lhs_info::rank()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>_rhs_info::rank()<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_inner_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>tmech::sequence&lt;1,2&gt;,<sp/>tmech::sequence&lt;1,2&gt;&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(_lhs_info::rank()<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>_rhs_info::rank()<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_inner_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>tmech::sequence&lt;3,4&gt;,<sp/>tmech::sequence&lt;1,2&gt;&gt;();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(_lhs_info::rank()<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>_rhs_info::rank()<sp/>==<sp/>4){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_inner_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>tmech::sequence&lt;3,4&gt;,<sp/>tmech::sequence&lt;1,2&gt;&gt;();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(_lhs_info::rank()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>_rhs_info::rank()<sp/>==<sp/>4){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_inner_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>tmech::sequence&lt;1,2&gt;,<sp/>tmech::sequence&lt;1,2&gt;&gt;();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_SequenceLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_SequenceRHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableLHS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_VariableRHS,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableLHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_VariableRHS&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_product(_VariableLHS,<sp/>_VariableRHS){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_inner_product_wrapper&lt;_VariableLHS,<sp/>_VariableRHS,<sp/>_SequenceLHS,<sp/>_SequenceRHS&gt;();</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Sequence,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basis_change(_Expression){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_basis_change_wrapper&lt;_Expression,<sp/>_Sequence&gt;();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trans(_Expression){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_data_type&gt;;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;trans:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>!=<sp/>4<sp/>||<sp/>_tensor_info::rank()<sp/>!=<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;trans():<sp/>transposition<sp/>is<sp/>only<sp/>valid<sp/>for<sp/>2th<sp/>or<sp/>4th<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>==<sp/>4){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_basis_change_wrapper&lt;_Expression,<sp/>tmech::sequence&lt;3,4,1,2&gt;&gt;();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_basis_change_wrapper&lt;_Expression,<sp/>tmech::sequence&lt;2,1&gt;&gt;();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trace(_Expression){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_data_type&gt;;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;trace:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;trace:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::function_wrapper&lt;_Expression,<sp/>symdiff::detail::trace_wrapper&gt;();</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>det(_Expression){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_data_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_data_type&gt;;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;det:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;det:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::function_wrapper&lt;_Expression,<sp/>symdiff::detail::det_wrapper&gt;();</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dev(_Expression){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;data_type&gt;;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>tensor_info::value_type;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;dev:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;dev:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ugly...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>third{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e10/tensor_info::dimension())};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Expression()<sp/>-<sp/>symdiff::real&lt;value_type,<sp/>0,<sp/>third,<sp/>1&gt;()*trace(_Expression())*symdiff::tensor_one&lt;data_type&gt;();</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sym(_Expression){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_data_type&gt;;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;sym:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;sym:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::real&lt;typename<sp/>_tensor_info::value_type,0,<sp/>5,<sp/>1&gt;()*(_Expression()<sp/>+<sp/>trans(_Expression()));</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>skew(_Expression){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;_data_type&gt;;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;_data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;skew:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(_tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;skew:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::real&lt;typename<sp/>_tensor_info::value_type,0,<sp/>5,<sp/>1&gt;()*(_Expression()<sp/>-<sp/>trans(_Expression()));</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vol(_Expression){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;data_type&gt;;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>tensor_info::value_type;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;vol:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;vol:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ugly...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>third{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e10/tensor_info::dimension())};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::real&lt;value_type,<sp/>0,<sp/>third,<sp/>1&gt;()*trace(_Expression())*symdiff::tensor_one&lt;data_type&gt;();</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>adj(_Expression){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;data_type&gt;;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;cof:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;cof:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_function_wrapper&lt;_Expression,<sp/>symdiff::detail::adj_wrapper&gt;();</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cof(_Expression){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;data_type&gt;;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;cof:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;cof:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::tensor_function_wrapper&lt;_Expression,<sp/>symdiff::detail::cof_wrapper&gt;();</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if_t&lt;symdiff::is_symdiff_type&lt;_Expression&gt;::value&gt;<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv(_Expression){</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>data_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Expression::data_type;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tensor_info<sp/>=<sp/>symdiff::detail::get_tensor_info&lt;data_type&gt;;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(<ref refid="structsymdiff_1_1detail_1_1is__tensor" kindref="compound">symdiff::detail::is_tensor&lt;data_type&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;inv:<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>tensor<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal"><sp/>(tensor_info::rank()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;inv:<sp/>only<sp/>for<sp/>second<sp/>order<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symdiff::detail::inv_tensor&lt;_Expression&gt;();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TMECH_FUNCTIONS_IMPLEMENTATION_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/peter/SynologyDrive/Drive/tmech/include/tmech/symdiff/tmech_functions_implementation.h"/>
  </compounddef>
</doxygen>
